import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.junit.Test;

import java.net.InetAddress;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.*;

public class TestTools {

    @Test
    public void speedTest(){

        double result = 0.0;
        long begin = Calendar.getInstance().getTimeInMillis();
        int k = 0;
        double[] tmpQuery = {13.672082, 8.945075, -1.600208, 11.746877, -7.500331, 5.744225, 12.970753, -11.617146, 7.155023, 0.06222, -9.646624, -8.920889, -3.463271, 12.943603, 25.832762, -1.994835, 12.143063, 13.257318, 11.001573, -5.943208, 18.449453, 4.025377, -11.236053, 19.029837, -2.092038, -15.229467, 3.457206, 5.989254, 7.1061, 2.653578, -11.814439, 5.467219, 1.97331, -4.189468, -3.943078, -9.147919, 18.282375, 3.055439, -0.493939, 4.698914, 12.760407, 8.284641, -8.487552, -6.113971, -4.308871, -15.311979, 3.563285, -2.946339, -0.262089, -0.607781, 13.426215, -14.940297, 3.654232, -17.474478, 3.217789, 1.979481, 6.509597, -0.756376, 4.489691, 4.983504, -0.589788, 5.908674, -15.324898, -6.031336, -4.310362, -7.283986, -25.342979, -16.289017, 6.207984, 10.65563, -5.626884, 9.185915, -16.165979, -6.784678, 1.367723, -1.409829, -7.551699, -3.039547, 7.701079, -13.402258, -7.425013, -6.003561, -6.93869, -1.256446, -1.411328, -23.101528, 4.688402, 12.118232, -4.625324, 4.231848, 5.277037, 2.237735, 12.860356, 8.058098, -4.752715, 5.634172, -10.669744, -4.868655, -3.08119, -14.765776, 2.765011, -16.742973, -4.290735, 7.69451, 10.064936, 1.790966, -5.886195, -7.537155, -2.044725, -6.91231, -11.337841, -10.767942, 4.818551, -1.354538, 17.485954, -6.308201, 13.799566, -4.240111, -4.302751, 22.198214, 5.599573, 9.176405, 3.023653, -17.543318, -14.704973, -23.391436, -4.795976, -16.076941};
        double[] queryFeatures = new double[128];
        double queryVectorNorm = 0;
        for (double v : tmpQuery){
            queryFeatures[k++] = v;
            queryVectorNorm += v * v;
        }

        double[] arr = new double[128];
        for (long i = 0; i < 250000; i++){
            for (int j = 0; j < 128; j++){
                arr[j] = Math.random()*50 - 25;
            }
            double score = 0.0;
            double docVectorNorm = 0.0;
            k = 0;
            for (double v : arr){
                docVectorNorm += v * v;
                score += v * queryFeatures[k++];
            }
            double result_temp = score / (Math.sqrt(docVectorNorm * queryVectorNorm));
            if (result_temp > result)
                result = result_temp;
        }
        System.out.println(result);

        long end = Calendar.getInstance().getTimeInMillis();
        System.out.println(end - begin);

    }


    @Test
    public void orderTest() {
        double[] query1 = {13.672082, 8.945075, -1.600208, 11.746877, -7.500331, 5.744225, 12.970753, -11.617146, 7.155023, 0.06222, -9.646624, -8.920889, -3.463271, 12.943603, 25.832762, -1.994835, 12.143063, 13.257318, 11.001573, -5.943208, 18.449453, 4.025377, -11.236053, 19.029837, -2.092038, -15.229467, 3.457206, 5.989254, 7.1061, 2.653578, -11.814439, 5.467219, 1.97331, -4.189468, -3.943078, -9.147919, 18.282375, 3.055439, -0.493939, 4.698914, 12.760407, 8.284641, -8.487552, -6.113971, -4.308871, -15.311979, 3.563285, -2.946339, -0.262089, -0.607781, 13.426215, -14.940297, 3.654232, -17.474478, 3.217789, 1.979481, 6.509597, -0.756376, 4.489691, 4.983504, -0.589788, 5.908674, -15.324898, -6.031336, -4.310362, -7.283986, -25.342979, -16.289017, 6.207984, 10.65563, -5.626884, 9.185915, -16.165979, -6.784678, 1.367723, -1.409829, -7.551699, -3.039547, 7.701079, -13.402258, -7.425013, -6.003561, -6.93869, -1.256446, -1.411328, -23.101528, 4.688402, 12.118232, -4.625324, 4.231848, 5.277037, 2.237735, 12.860356, 8.058098, -4.752715, 5.634172, -10.669744, -4.868655, -3.08119, -14.765776, 2.765011, -16.742973, -4.290735, 7.69451, 10.064936, 1.790966, -5.886195, -7.537155, -2.044725, -6.91231, -11.337841, -10.767942, 4.818551, -1.354538, 17.485954, -6.308201, 13.799566, -4.240111, -4.302751, 22.198214, 5.599573, 9.176405, 3.023653, -17.543318, -14.704973, -23.391436, -4.795976, -16.076941};
        double[] query2 = {17.88551137194795,
                -20.414606171293542,
                1.3315553532670847,
                2.5767632833722125,
                6.613678215556273,
                -6.621767399085137,
                -2.0063708909132103,
                -3.477713035556807,
                -24.106556765200637,
                -8.139387443213796,
                7.376908164465412,
                19.755252017138567,
                -20.010786302691173,
                4.29367946432756,
                -24.674048950689436,
                -21.389146668361125,
                18.594265354046996,
                -22.216271529118213,
                -5.249946757017387,
                -19.71251864720336,
                -7.491723869336887,
                -20.228869046508606,
                -14.501909383530808,
                21.18324884480311,
                17.345791091456114,
                2.971974922130361,
                10.698295692242802,
                4.269844538767082,
                21.735895438157492,
                -10.61839718194449,
                -6.940639730600374,
                3.4068573993405025,
                -8.12624699875127,
                -18.009748498742262,
                -16.064094567373978,
                -5.30302189261106,
                -20.00245439365658,
                -12.285469745711191,
                22.580501311041864,
                -15.007767661309124,
                20.389767810721295,
                -7.285539899578573,
                2.9360556671426075,
                -14.516298675959543,
                -7.160306542264923,
                11.744339244774679,
                -9.433466347224117,
                3.9419034033577276,
                -9.845761892465799,
                -23.523297389495596,
                2.880604477066072,
                12.622327629644758,
                -16.73267312892181,
                23.842155942134205,
                -18.3280254764232,
                -9.889666777230365,
                -15.226730441988428,
                -15.656102039541315,
                -1.8182317564221613,
                -15.548085974635468,
                -10.702475023868423,
                -7.965772457271424,
                -12.61750571531674,
                1.8016013128397503,
                17.01865584496425,
                -7.618607217160356,
                9.98976334488961,
                -10.483984720387973,
                4.868123349664582,
                11.608604440697754,
                -12.172948380293452,
                5.131369886495047,
                -21.53999916385136,
                21.253107393381995,
                0.6004681776580192,
                -7.014503387279685,
                -3.3594450072137008,
                -15.328346989533037,
                19.884599730204286,
                -21.620313284230356,
                -10.301965730306211,
                8.009804407274359,
                -10.822827361068432,
                -14.877023417720192,
                11.735909312967898,
                -13.244041133638229,
                -12.75060350657954,
                -13.9387979229952,
                -2.511815865384275,
                -9.582976457371595,
                -14.299518353923263,
                7.765458667363163,
                3.943288773286941,
                12.081188084818152,
                -19.380990160313377,
                -20.060643864663074,
                -22.45652269355834,
                -23.32574906518091,
                -7.439579168057314,
                -2.698291253989556,
                18.439510275132257,
                1.5694613949510448,
                -11.330946086110833,
                -3.288907434138604,
                14.305818577547171,
                -14.123108528363026,
                -14.295175223714523,
                -4.8790514874023145,
                -12.440770180688688,
                20.21680770538051,
                -7.0212657600184585,
                -15.411326978423812,
                -8.52528371053246,
                7.072597199238814,
                -0.2419347760628483,
                -10.990568657313709,
                2.6545371392694967,
                12.922258306072699,
                2.571269117913861,
                3.5051471279059285,
                -10.417483744813632,
                -12.736479318633503,
                4.02416500554067,
                11.471444947473572,
                -10.41690226622377,
                -19.623848534144123,
                -3.7667714084152806,
                6.170035105045873};
        double sum = 0;
        for (int i = 0; i < 128; i++) {
            sum += query1[i]*query2[i];
        }
        System.out.println(sum);
    }

    @Test
    public void randomTest() {
        for (int i = 0; i < 100; i++) {
            System.out.println(Math.random());
        }
    }

    @Test
    public void clientTest() {
        TransportClient client;
        String indexNameAll = "test_all";
        String cluster_name = "face_all_es";
        int number_of_shards_all = 1;
        int number_of_replicas_all = 0;
        int number_of_shards_hashid = 1;
        int number_of_replicas_hashid = 2;

        List<String> allIPs = new ArrayList<String>();
        allIPs.add("123.206.14.171");
        Collections.shuffle(allIPs);

        Settings settings = Settings.builder()
                .put("cluster.name", cluster_name)
                .put("client.transport.sniff", true)
                .build();

        try {
            client = new PreBuiltTransportClient(settings)
                    .addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(allIPs.get(0)), 9300));

            //总的索引
            client.admin().indices().prepareCreate(indexNameAll)
                    .setSettings(Settings.builder()
                            .put("index.number_of_shards", number_of_shards_all)
                            .put("index.number_of_replicas", number_of_replicas_all))
                    .get();
            System.out.println("success");


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void timeTest() {
        for (int i = 0; i < 100; i++){
            Date date = new Date();
            System.out.println(""+date.getTime()+Math.random());
        }
    }

    @Test
    public void makeStringTest() {
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < 128; i++) {
            stringBuffer = stringBuffer.append("doc['item"+i+"'].value * params.vector["+i+"] + ");
        }
        System.out.println(stringBuffer);
    }

    @Test
    public void curTimeTest() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar tmp = Calendar.getInstance();
        int i = 1;
        tmp.setTime(new Date());
        tmp.set(Calendar.YEAR, 2017);
        tmp.set(Calendar.MONTH, (int) ((i % 4) + 5));
        tmp.set(Calendar.DAY_OF_MONTH, (int) (i % 31));
        tmp.set(Calendar.HOUR_OF_DAY, (int) (i % 24));
        tmp.set(Calendar.MINUTE, (int) (i % 60));
        tmp.set(Calendar.SECOND, (int) (i % 60));
        System.out.println(df.format(tmp.getTime()));

        System.out.println("================");
        System.out.println(df.format(new Date()));
    }

}
